#!/usr/bin/python
# script to take the tokenized output of a LightSpeed Pascal (LSP) file,
# typically as generated by lspTokenizer.py, and, based on a Pascal grammar,
# emit a parse tree, in JSON format.

import fileinput
import json
import sys
from tokens import *


class LSPSyntaxError(Exception):
    def __init__(self, expected, received):
        self.expected = expected
        self.received = received
        self.value = 'Syntax Error: expected "{0}", got "{1}" ({2})'.format(expected, received.name, received.data)


    def __str__(self):
        return repr(self.value)


def tokenGenerator():
    for line in fileinput.input():
        try:
            tuple = json.loads(line)
            print 'read token', tuple[0], 'name', tuple[1], 'data', tuple[2]
            token = { 'id': tuple[0], 'name': tuple[1], 'data': tuple[2] }
            yield token
        except Exception as e:
            print e


def getToken():
    global gTokens
    return next(gTokens)


def skipSpace():
    while True:
        token = getToken()
        if token['id'] != TOKEN_SPACE:
            return token


def parseUnit(token):
    print 'parsing unit'
    unit_name = token['data']
    token = skipSpace()
    if (token['id'] != TOKEN_SEMICOLON):
        raise LSPSyntaxError(';', token);
    return { 'unit': unit_name }


def parseFile():
    print 'parsing file'
    token = getToken()
    if (token['id'] == TOKEN_UNIT):
        return parseUnit(token)
    else:
        raise LSPSyntaxError('unit', token)


# main program
gTokens = tokenGenerator()
tree = parseFile()
print '---', 'Parse Tree', '---'
print json.dumps(tree)

